apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-storage
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  labels:
    create-ca-bundle: "true"
  name: minio-tenant
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-7"
  labels:
    create-ca-bundle: "true"
  name: spark-app
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-7"
  labels:
    create-ca-bundle: "true"
  name: vault
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path
provisioner: rancher.io/local-path
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  name: gatekeeper-smoke-test
  namespace: gatekeeper-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: minio-kes
  namespace: minio-tenant
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-role
  namespace: local-path-storage
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  name: gatekeeper-smoke-test
rules:
- apiGroups:
  - templates.gatekeeper.sh
  resources:
  - constrainttemplates
  verbs:
  - create
  - delete
- apiGroups:
  - constraints.gatekeeper.sh
  resources:
  - k8sallowedrepos
  verbs:
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - persistentvolumeclaims
  - configmaps
  - pods
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: metrics-server
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: system:aggregated-metrics-reader
rules:
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: metrics-server
  name: system:metrics-server
rules:
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-bind
  namespace: local-path-storage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: role-tokenreview-binding
  namespace: minio-tenant
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: minio-kes
  namespace: minio-tenant
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  name: gatekeeper-smoke-test
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gatekeeper-smoke-test
subjects:
- kind: ServiceAccount
  name: gatekeeper-smoke-test
  namespace: gatekeeper-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
data:
  config.json: |-
    {
            "nodePathMap":[
            {
                    "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                    "paths":["/opt/local-path-provisioner"]
            }
            ]
    }
  helperPod.yaml: |-
    apiVersion: v1
    kind: Pod
    metadata:
      name: helper-pod
    spec:
      priorityClassName: system-node-critical
      tolerations:
        - key: node.kubernetes.io/disk-pressure
          operator: Exists
          effect: NoSchedule
      containers:
      - name: helper-pod
        image: busybox
        imagePullPolicy: IfNotPresent
  setup: |-
    #!/bin/sh
    set -eu
    mkdir -m 0777 -p "$VOL_DIR"
  teardown: |-
    #!/bin/sh
    set -eu
    rm -rf "$VOL_DIR"
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-config
  namespace: local-path-storage
---
apiVersion: v1
data:
  kes-policy.hcl: |
    path "kv/data/minio-tenant/*" {
      capabilities = [ "create", "read" ]
    }
    path "kv/metadata/minio-tenant/*" {
      capabilities = [ "list", "delete" ]
    }
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-7"
  name: kes-policy
  namespace: vault
---
apiVersion: v1
kind: Secret
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
    kubernetes.io/service-account.name: minio-kes
    replicator.v1.mittwald.de/replication-allowed: "true"
    replicator.v1.mittwald.de/replication-allowed-namespaces: vault
  name: minio-kes-secret
  namespace: minio-tenant
type: kubernetes.io/service-account-token
---
apiVersion: v1
data: {}
kind: Secret
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-8"
    replicator.v1.mittwald.de/replicate-from: minio-tenant/minio-kes-secret
  name: minio-kes-secret
  namespace: vault
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    k8s-app: metrics-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        k8s-app: metrics-server
    spec:
      containers:
      - args:
        - --cert-dir=/tmp
        - --secure-port=10250
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        - --kubelet-use-node-status-port
        - --metric-resolution=15s
        - --kubelet-insecure-tls=true
        image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
          periodSeconds: 10
        name: metrics-server
        ports:
        - containerPort: 10250
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: https
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /tmp
          name: tmp-dir
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      serviceAccountName: metrics-server
      volumes:
      - emptyDir: {}
        name: tmp-dir
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-9"
  name: local-path-provisioner
  namespace: local-path-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-path-provisioner
  template:
    metadata:
      labels:
        app: local-path-provisioner
    spec:
      containers:
      - command:
        - local-path-provisioner
        - --debug
        - start
        - --config
        - /etc/config/config.json
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: rancher/local-path-provisioner:v0.0.26
        imagePullPolicy: IfNotPresent
        name: local-path-provisioner
        volumeMounts:
        - mountPath: /etc/config/
          name: config-volume
      serviceAccountName: local-path-provisioner-service-account
      volumes:
      - configMap:
          name: local-path-config
        name: config-volume
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  labels:
    k8s-app: metrics-server
  name: v1beta1.metrics.k8s.io
spec:
  group: metrics.k8s.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: metrics-server
    namespace: kube-system
  version: v1beta1
  versionPriority: 100
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-20"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: cert-manager
  namespace: argocd
spec:
  destination:
    namespace: cert-manager
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: cert-manager
    helm:
      parameters:
      - forceString: true
        name: installCRDs
        value: "true"
      values: |-
        cert-manager:
          installCRDs: true
    repoURL: https://charts.jetstack.io
    targetRevision: v1.14.5
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-6"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: data-sanitization
  namespace: argocd
spec:
  destination:
    namespace: spark-app
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: data-sanitization
    helm:
      valuesObject:
        ingress:
          className: nginx
          enabled: true
          hosts:
          - host: data-sanitization.integration
            paths:
            - path: /
              pathType: Prefix
        resources:
          limits:
            cpu: 500m
            memory: 1024Mi
          requests:
            cpu: 250m
            memory: 512Mi
        s3:
          accessKeyId: minio
          certificate: /etc/ssl/certs/ca.crt
          endpoint: minio.minio-tenant.svc.cluster.local
          secretAccessKey: minio123
        secret:
          create: true
          name: minio-credentials
        volumeMounts:
        - mountPath: /etc/ssl/certs/ca.crt
          name: ca-bundle
          readOnly: true
          subPath: ca.crt
        volumes:
        - configMap:
            defaultMode: 422
            name: ca-bundle
          name: ca-bundle
    repoURL: https://glaciation-heu.github.io/data-sanitization-service
    targetRevision: 0.2.2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: data-storage-service
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: data-storage-service
    helm:
      valuesObject:
        ingressHostName: data-storage.integration
    repoURL: https://glaciation-heu.github.io/glaciation-data-storage-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: data-storage-service-db
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: data-storage-service-DB
    helm:
      valuesObject:
        ingressHostName: dss-db.integration
    repoURL: https://glaciation-heu.github.io/glaciation-dssdb/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-8"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: gatekeeper
  namespace: argocd
spec:
  destination:
    namespace: gatekeeper-system
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: gatekeeper
    helm:
      values: |
        postInstall:
          labelNamespace:
            extraRules:
            - apiGroups:
              - management.cattle.io
              resources:
              - projects
              verbs:
              - updatepsa
    repoURL: https://open-policy-agent.github.io/gatekeeper/charts
    targetRevision: 3.15.1
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-8"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: gatekeeper-policy-manager
  namespace: argocd
spec:
  destination:
    namespace: gatekeeper-system
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: gatekeeper-policy-manager
    helm:
      valuesObject:
        config:
          secretKey: supersecuresecretkey
        ingress:
          enabled: true
          hosts:
          - host: gpm.integration
            pathType: Prefix
            paths:
            - /
          ingressClassName: nginx
    repoURL: https://sighupio.github.io/gatekeeper-policy-manager
    targetRevision: 0.10.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: idmg-decision-engine
  namespace: argocd
spec:
  destination:
    namespace: idmg
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: cf
    repoURL: https://idmg-pub.gitlab.io/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: jena-fuseki
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: jena-fuseki
    helm:
      valuesObject:
        ingressHostName: jena-fuseki.integration
    repoURL: https://glaciation-heu.github.io/jena-fuseki/helm-charts/
    targetRevision: 1.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kafdrop
  namespace: argocd
spec:
  destination:
    namespace: kafdrop
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: kafdrop
    helm:
      values: |
        server:
          servlet:
            contextPath: /kafdrop
        service:
          annotations: {}
          type: ClusterIP
          port: 80
        kafka:
          brokerConnect: kafka.kafka.svc.cluster.local:9092
    repoURL: https://glaciation-heu.github.io/mef-sog-uc1/
    targetRevision: 0.1.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kafka
  namespace: argocd
spec:
  destination:
    namespace: kafka
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: kafka
    helm:
      values: |
        image:
          tag: 3.5.1-debian-11-r25
          pullPolicy: Always

        kraft:
          enabled: false

        auth:
          interBrokerProtocol: plaintext

        broker:
          replicaCount: 3
          podAntiAffinityPreset: hard
          persistence:
            enabled: true
            storageClass: longhorn
            accessModes:
              - ReadWriteOnce
            size: 2Gi

        controller:
          replicaCount: 0

        zookeeper:
          enabled: true
          replicaCount: 3
          podAntiAffinityPreset: hard
          persistence:
            enabled: true
            storageClass: longhorn
            accessModes:
              - ReadWriteOnce
            size: 5Gi

        listeners:
          client:
            protocol: plaintext

          interbroker:
            protocol: plaintext

          external:
            protocol: plaintext

        externalAccess:
          enabled: false
    repoURL: https://glaciation-heu.github.io/mef-sog-uc1/
    targetRevision: 28.0.4
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: keda
  namespace: argocd
spec:
  destination:
    namespace: keda
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: keda
    repoURL: https://kedacore.github.io/charts
    targetRevision: 2.14.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: kg-exporter
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: kg-exporter
    helm:
      valuesObject:
        ingressHostName: kg-exporter.integration
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        settings:
          builder:
            builder_tick_seconds: 1800
            is_single_slice: true
            node_port: 80
            single_slice_url: http://metadata-service:80
          k8s:
            in_cluster: true
          metadata:
            metadata_service_url: metadata-service
          prometheus:
            endpoint_port: 8080
          prometheus_client:
            url: http://monitoring-stack-prometheus-server.monitoring
    repoURL: https://glaciation-heu.github.io/kg_exporter/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: longhorn
  namespace: argocd
spec:
  destination:
    namespace: longhorn-system
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: longhorn
    helm:
      values: |
        preUpgradeChecker:
          jobEnabled: false
    repoURL: https://charts.longhorn.io/
    targetRevision: v1.6.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mef-sog-uc1-wl
  namespace: argocd
spec:
  destination:
    namespace: mef-sog-uc1-wl
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: mef-sog-uc1-wl
    helm:
      values: |
        scheduledClient:
          service:
            type: ClusterIP
            port: 80
        elaborationTimbMs:
          logLevelJpa: true
    repoURL: https://glaciation-heu.github.io/mef-sog-uc1/
    targetRevision: 1.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: metadata-service
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: metadata-service
    helm:
      valuesObject:
        ingressHostName: metadata.integration
    repoURL: https://glaciation-heu.github.io/glaciation-metadata-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-7"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: minio
  namespace: argocd
spec:
  destination:
    namespace: minio-operator
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: operator
    helm:
      valuesObject:
        console:
          ingress:
            enabled: false
        tenants: []
    repoURL: https://operator.min.io
    targetRevision: 5.0.14
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-7"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: minio-tenant
  namespace: argocd
spec:
  destination:
    namespace: minio-tenant
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: tenant
    helm:
      valuesObject:
        ingress:
          api:
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            enabled: true
            host: glaciation-tenant.integration
            ingressClassName: nginx
            path: /
            pathType: Prefix
          console:
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            enabled: true
            host: glaciation-tenant-console.integration
            ingressClassName: nginx
            path: /
            pathType: Prefix
        secrets:
          accessKey: minio
          name: glaciation-env-configuration
          secretKey: minio123
        tenant:
          buckets:
          - name: uc1
          - name: uc2
          - name: uc3
          - name: sanitization
          certificate:
            requestAutoCert: true
          configuration:
            name: glaciation-env-configuration
          kes:
            clientCertSecret:
              name: ca-bundle
              type: kubernetes.io/tls
            configuration: |-
              address: :7373
              tls:
                key: /tmp/kes/server.key # Path to the TLS private key
                cert: /tmp/kes/server.crt # Path to the TLS certificate
              admin:
                identity: ${MINIO_KES_IDENTITY}
              cache:
                expiry:
                  any: 5m0s
                  unused: 20s
              log:
                error: on
                audit: off
              keystore:
                vault:
                  endpoint: "https://vault-internal.vault.svc.cluster.local:8200"
                  version: v2
                  prefix: "minio-tenant" # Vault will store keys under this prefix
                  kubernetes:
                    role: "minio-kes"
                    jwt: "/var/run/secrets/kubernetes.io/serviceaccount/token"
                  tls: # The Vault client TLS configuration for certificate verification
                    ca: "/tmp/kes/ca.crt" # Path to PEM root CA certificates
                  status:
                    ping: 10s # Duration until the server checks Vault's status again
            containerSecurityContext:
              allowPrivilegeEscalation: false
              runAsGroup: 1000
              runAsNonRoot: true
              runAsUser: 1000
            image:
              repository: quay.io/minio/kes
              tag: 2024-03-13T17-52-13Z
            imagePullPolicy: IfNotPresent
            keyName: encryption-key
            replicas: 2
            securityContext:
              fsGroup: 1000
              runAsGroup: 1000
              runAsNonRoot: true
              runAsUser: 1000
            serviceAccountName: minio-kes
          name: glaciation
          pools:
          - containerSecurityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              runAsGroup: 1000
              runAsNonRoot: true
              runAsUser: 1000
              seccompProfile:
                type: RuntimeDefault
            name: pool-0
            resources:
              limits:
                cpu: 2
                memory: 4Gi
              requests:
                cpu: 1
                memory: 2Gi
            securityContext:
              fsGroup: 1000
              fsGroupChangePolicy: OnRootMismatch
              runAsGroup: 1000
              runAsNonRoot: true
              runAsUser: 1000
            servers: 4
            size: 10Gi
            storageClassName: local-path
            volumesPerServer: 4
    repoURL: https://operator.min.io
    targetRevision: 5.0.14
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: monitoring-stack
  namespace: argocd
spec:
  destination:
    namespace: monitoring
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: monitoring-stack
    helm:
      valuesObject:
        grafana:
          adminPassword: donkeyhot
          grafana.ini:
            auth:
              signout_redirect_url: /
            auth.anonymous:
              enabled: true
            users:
              viewers_can_edit: true
          ingress:
            enabled: true
            hosts:
            - grafana.integration
            ingressClassName: nginx
            path: /
            pathType: Prefix
        influxdb:
          enabled: true
        kepler:
          enabled: true
        kubernetes-event-exporter:
          config:
            receivers:
            - name: dump
              stdout:
                deDot: true
            - loki:
                streamLabels:
                  stream: kube-events
                url: http://monitoring-stack-loki:3100/loki/api/v1/push
              name: loki
        prometheus:
          server:
            ingress:
              enabled: true
              hosts:
              - prometheus.integration
              ingressClassName: nginx
        telegraf:
          config:
            agent:
              debug: true
              flush_interval: 5s
              interval: 5s
              metric_batch_size: 50000
              metric_buffer_limit: 500000
            outputs:
            - influxdb_v2:
                bucket: prometheus
                metric_batch_size: 50000
                metric_buffer_limit: 500000
                organization: influxdata
                timeout: 30s
                token: encrypted
                urls:
                - http://monitoring-stack-influxdb2
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 1
              memory: 1Gi
    repoURL: https://hiro-microdatacenters-bv.github.io/monitoring-stack/helm-charts/
    targetRevision: 1.0.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: neo4j
  namespace: argocd
spec:
  destination:
    namespace: idmg
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: neo4j
    helm:
      valuesObject:
        neo4j:
          name: idmg
          password: password
        services:
          neo4j:
            spec:
              type: ClusterIP
        volumes:
          data:
            mode: defaultStorageClass
    repoURL: https://neo4j.github.io/helm-charts/
    targetRevision: 5.21.2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: nginx
  namespace: argocd
spec:
  destination:
    namespace: default
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: nginx-ingress
    helm:
      valuesObject:
        controller:
          config:
            entries:
              external-status-address: 10.1.14.160
          kind: deployment
          nodeSelector:
            master: "true"
          service:
            httpPort:
              enable: true
              nodePort: 31080
              port: 80
              targetPort: 80
            httpsPort:
              enable: true
              nodePort: 31443
              port: 443
              targetPort: 443
            type: NodePort
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Equal
    repoURL: ghcr.io/nginxinc/charts
    targetRevision: 1.1.3
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: prediction-service
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: prediction-service
    helm:
      valuesObject:
        ingressHostName: prediction.integration
    repoURL: https://glaciation-heu.github.io/glaciation-prediction-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-8"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: replicator
  namespace: argocd
spec:
  destination:
    namespace: replicator
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: kubernetes-replicator
    repoURL: https://helm.mittwald.de
    targetRevision: 2.9.2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-8"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: semantification-service
  namespace: argocd
spec:
  destination:
    namespace: semantification
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: semantification-service
    helm:
      valuesObject:
        ingressHostName: semantification.integration
    repoURL: https://glaciation-heu.github.io/glaciation-semantification-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-6"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: spark-history-server
  namespace: argocd
spec:
  destination:
    namespace: spark-app
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: spark-history-server
    helm:
      valuesObject:
        ingress:
          className: nginx
          enabled: true
          hosts:
          - host: spark-history-server.integration
            paths:
            - path: /
              pathType: Prefix
        resources:
          limits:
            cpu: 500m
            memory: 1024Mi
          requests:
            cpu: 250m
            memory: 512Mi
        s3:
          bucket: sanitization/spark-events
          endpoint: minio.minio-tenant.svc.cluster.local
        secret:
          create: false
          name: minio-credentials
        volumeMounts:
        - mountPath: /etc/ssl/certs/ca.crt
          name: ca
          readOnly: true
          subPath: ca.crt
        - mountPath: /opt/java/openjdk/lib/security/cacerts
          name: ca
          readOnly: true
          subPath: ca.jks
        volumes:
        - configMap:
            defaultMode: 422
            name: ca-bundle
          name: ca
    repoURL: https://glaciation-heu.github.io/spark-history-server
    targetRevision: 1.0.3
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-6"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: spark-operator
  namespace: argocd
spec:
  destination:
    namespace: spark-operator
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: spark-operator
    helm:
      valuesObject:
        sparkJobNamespaces:
        - spark-app
        webhook:
          enable: true
    repoURL: https://kubeflow.github.io/spark-operator/
    targetRevision: 1.2.14
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-8"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: trust-manager
  namespace: argocd
spec:
  destination:
    namespace: cert-manager
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: trust-manager
    helm:
      valuesObject:
        podDisruptionBudget:
          enabled: true
        replicaCount: 2
        secretTargets:
          authorizedSecrets:
          - ca-bundle
          enabled: true
    repoURL: https://charts.jetstack.io
    targetRevision: v0.9.2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: uc2-workload-service
  namespace: argocd
spec:
  destination:
    namespace: uc2
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: uc2-workload
    helm:
      valuesObject:
        ingressHostName: uc2-workload.integration
    repoURL: https://glaciation-heu.github.io/glaciation-uc2-workload-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: ui-gateway
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: ui-gateway-server
    repoURL: https://glaciation-heu.github.io/ui_gateway/helm-charts
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-8"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: vault
  namespace: argocd
spec:
  destination:
    namespace: vault
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: vault
    helm:
      valuesObject:
        global:
          enabled: true
          tlsDisable: false
        injector:
          enabled: false
        server:
          affinity: ""
          auditStorage:
            enabled: true
            size: 10Gi
            storageClass: local-path
          dataStorage:
            enabled: true
            size: 10Gi
            storageClass: local-path
          enabled: true
          extraEnvironmentVars:
            VAULT_CACERT: /vault/userconfig/vault-tls/ca.crt
            VAULT_TLSCERT: /vault/userconfig/vault-tls/tls.crt
            VAULT_TLSKEY: /vault/userconfig/vault-tls/tls.key
          ha:
            enabled: true
            raft:
              config: |
                disable_mlock = true
                ui = true

                listener "tcp" {
                  address = "[::]:8200"
                  cluster_address = "[::]:8201"
                  tls_cert_file = "/vault/userconfig/vault-tls/tls.crt"
                  tls_key_file  = "/vault/userconfig/vault-tls/tls.key"
                  tls_client_ca_file = "/vault/userconfig/vault-tls/ca.crt"
                }

                storage "raft" {
                  path = "/vault/data"
                }

                service_registration "kubernetes" {}
              enabled: true
              setNodeId: true
            replicas: 3
          ingress:
            activeService: false
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            enabled: true
            hosts:
            - host: vault.integration
            ingressClassName: nginx
          resources:
            limits:
              cpu: 250m
              memory: 256Mi
            requests:
              cpu: 250m
              memory: 256Mi
          service:
            active:
              enabled: false
            enabled: true
            standby:
              enabled: false
          standalone:
            enabled: false
          ui:
            enabled: true
          volumeMounts:
          - mountPath: /vault/userconfig/vault-tls
            name: userconfig-vault-tls
            readOnly: true
          volumes:
          - name: userconfig-vault-tls
            secret:
              defaultMode: 420
              secretName: vault-tls
    repoURL: https://helm.releases.hashicorp.com
    targetRevision: 0.28.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=true
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  name: gatekeeper-smoke-test
  namespace: gatekeeper-system
spec:
  backoffLimit: 5
  template:
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - |
          # Check status of the Gatekeeper service
          (
            set -e; # make sure the job fails if any instruction fails

            # Some of the following commands are meant to fail to prove the
            # successful enforcement of the policy. With the suffix '&& exit 1'
            # we force to exit with an error status whenever these commands are
            # executed successfully.
            # NOTE: This is not the same as the ! operator.

            kubectl create -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/template.yaml;
            kubectl create -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/constraint.yaml;
            kubectl create -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/example_allowed.yaml -n default;
            kubectl create -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/example_disallowed_container.yaml -n default && exit 1;
            kubectl create -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/example_disallowed_initcontainer.yaml -n default && exit 1;
            kubectl create -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/example_disallowed_both.yaml -n default && exit 1;

            # Overwrite last command exit status with success. Indeed, if we
            # get here the test has succeeded
            exit 0
          )

          # Store exit status of the subshell (i.e., state of the test)
          exit_code=$?

          # Restore cluster in a clean state (these always run even in case of errors above)
          kubectl delete -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/example_allowed.yaml -n default;
          kubectl delete -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/example_disallowed_container.yaml -n default;
          kubectl delete -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/example_disallowed_initcontainer.yaml -n default;
          kubectl delete -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/example_disallowed_both.yaml -n default;
          kubectl delete -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/constraint.yaml;
          kubectl delete -f https://raw.githubusercontent.com/unibg-seclab/glaciation-gitops-test/main/resources/template.yaml

          # Return the state of smoke test
          exit $exit_code
        image: bitnami/kubectl:1.30
        name: kubectl
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: gatekeeper-smoke-test
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
  name: minio-smoke-tests
  namespace: minio-tenant
spec:
  backoffLimit: 5
  template:
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - |
          set -e # make sure the job fails if any instruction fails

          source /tmp/config.env;
          set -x;  # enable printing the command before execution (in the sub-shell)
          mc alias set minio https://minio.minio-tenant.svc.cluster.local $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
          mc mb -p minio/test-encrypted-bucket;
          mc encrypt set sse-kms encryption-key minio/test-encrypted-bucket;
          mc ls minio;
          echo "This is a line of text" > /tmp/test-object;
          mc mv /tmp/test-object minio/test-encrypted-bucket;
          mc ls minio/test-encrypted-bucket;
          mc cat minio/test-encrypted-bucket/test-object
        image: quay.io/minio/minio:RELEASE.2024-03-15T01-07-19Z
        name: minio-client
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 1000
          runAsUser: 1000
        volumeMounts:
        - mountPath: /tmp/config.env
          name: configuration
          readOnly: true
          subPath: config.env
        - mountPath: /etc/ssl/certs/ca.crt
          name: ca-bundle
          readOnly: true
          subPath: ca.crt
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - configMap:
          defaultMode: 422
          name: ca-bundle
        name: ca-bundle
      - name: configuration
        projected:
          defaultMode: 420
          sources:
          - secret:
              name: glaciation-env-configuration
---
apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-7"
  name: init-vault-cluster
  namespace: vault
spec:
  backoffLimit: 5
  template:
    spec:
      containers:
      - command:
        - /bin/sh
        - -c
        - |
          set -e # make sure the job fails if any instruction fails

          function unseal {
              head -n $THRESHOLD /vault/cluster-keys |
              while read line; do
                vault operator unseal \
                  -address=https://$1.vault-internal:8200 \
                  $line;
              done
          }

          echo '[*] Initialize HA Vault cluster'
          # Wait for the startup of the Vault pods
          sleep 30 # it does the job without requiring to create an ad hoc image
          # TODO: Persist PGP encrypted Vault unseal keys somewhere outside the cluster
          vault operator init \
            -address=https://vault-0.vault-internal:8200 \
            -key-shares=$SHARES \
            -key-threshold=$THRESHOLD \
            -format=json > /vault/response.json
          # Extract unseal keys from the JSON response
          awk '/"unseal_keys_b64": \[/{flag=1;next}/\]/{flag=0}flag' /vault/response.json | sed -n 's/\s*"\(.*\)".*/\1/p' > /vault/cluster-keys
          unseal vault-0
          vault operator raft join \
            -address=https://vault-1.vault-internal:8200 \
            -leader-ca-cert="$(cat /vault/userconfig/vault-tls/ca.crt)" \
            -leader-client-cert="$(cat /vault/userconfig/vault-tls/tls.crt)" \
            -leader-client-key="$(cat /vault/userconfig/vault-tls/tls.key)" \
            https://vault-0.vault-internal:8200
          unseal vault-1
          vault operator raft join \
            -address=https://vault-2.vault-internal:8200 \
            -leader-ca-cert="$(cat /vault/userconfig/vault-tls/ca.crt)" \
            -leader-client-cert="$(cat /vault/userconfig/vault-tls/tls.crt)" \
            -leader-client-key="$(cat /vault/userconfig/vault-tls/tls.key)" \
            https://vault-0.vault-internal:8200
          unseal vault-2
          echo -e '\n[*] Setup HA Vault cluster for integration with MinIO'
          VAULT_ROOT_TOKEN=$(sed -n 's/\s*"root_token": "\(.*\)".*/\1/p' /vault/response.json)
          vault login \
            -address=https://vault-0.vault-internal:8200 \
            $VAULT_ROOT_TOKEN
          vault secrets enable \
            -address=https://vault-0.vault-internal:8200 \
            -version=2 \
            kv
          vault policy write \
            -address=https://vault-0.vault-internal:8200 \
            kes-policy /minio/kes/kes-policy.hcl
          vault auth enable \
            -address=https://vault-0.vault-internal:8200 \
            kubernetes
          vault write \
            -address=https://vault-0.vault-internal:8200 \
            auth/kubernetes/config \
            token_reviewer_jwt="$(cat /minio/kes/service-account/token)" \
            kubernetes_host="https://kubernetes.default.svc.cluster.local" \
            kubernetes_ca_cert="$(cat /minio/kes/service-account/ca.crt)" \
            issuer="https://kubernetes.default.svc.cluster.local"
          vault write \
            -address=https://vault-0.vault-internal:8200 \
            auth/kubernetes/role/minio-kes \
            bound_service_account_names=minio-kes \
            bound_service_account_namespaces=minio-tenant \
            policies=kes-policy \
            ttl=1h
        env:
        - name: SHARES
          value: "5"
        - name: THRESHOLD
          value: "3"
        image: hashicorp/vault:1.16.1
        name: vault
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          runAsGroup: 1000
          runAsUser: 100
        volumeMounts:
        - mountPath: /etc/ssl/certs/ca.crt
          name: ca-bundle
          readOnly: true
          subPath: ca.crt
        - mountPath: /vault/userconfig/vault-tls
          name: userconfig-vault-tls
          readOnly: true
        - mountPath: /minio/kes/service-account
          name: minio-kes-service-account-token
          readOnly: true
        - mountPath: /minio/kes/kes-policy.hcl
          name: kes-policy
          readOnly: true
          subPath: kes-policy.hcl
      restartPolicy: Never
      securityContext:
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 100
        seccompProfile:
          type: RuntimeDefault
      volumes:
      - configMap:
          defaultMode: 422
          name: ca-bundle
        name: ca-bundle
      - name: userconfig-vault-tls
        secret:
          defaultMode: 420
          secretName: vault-tls
      - name: minio-kes-service-account-token
        secret:
          defaultMode: 420
          secretName: minio-kes-secret
      - configMap:
          defaultMode: 420
          name: kes-policy
        name: kes-policy
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-8"
  name: my-selfsigned-ca
  namespace: cert-manager
spec:
  commonName: my-selfsigned-ca
  isCA: true
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: selfsigned-issuer
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: root-secret
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-8"
  name: vault-certificate
  namespace: vault
spec:
  commonName: system:node:*.vault.svc.cluster.local
  dnsNames:
  - '*.vault-internal'
  - '*.vault-internal.vault.svc.cluster.local'
  - '*.vault'
  - vault-internal.vault.svc.cluster.local
  duration: 2160h
  ipAddresses:
  - 127.0.0.1
  - 192.168.49.2
  isCA: false
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: private-ca-issuer
  privateKey:
    algorithm: RSA
    size: 2048
  renewBefore: 360h
  secretName: vault-tls
  subject:
    organizations:
    - system:nodes
  usages:
  - digital signature
  - key encipherment
  - data encipherment
  - server auth
  - client auth
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-8"
  name: private-ca-issuer
spec:
  ca:
    secretName: root-secret
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-8"
  name: selfsigned-issuer
spec:
  selfSigned: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-ingress
  namespace: argocd
spec:
  ingressClassName: nginx
  rules:
  - host: argocd.integration
    http:
      paths:
      - backend:
          service:
            name: argocd-server
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: decision-engine-ingress
  namespace: idmg
spec:
  ingressClassName: nginx
  rules:
  - host: database-controller.integration
    http:
      paths:
      - backend:
          service:
            name: idmgdb
            port:
              number: 8080
        path: /
        pathType: Prefix
  - host: data-generator.integration
    http:
      paths:
      - backend:
          service:
            name: idmgdc
            port:
              number: 8080
        path: /
        pathType: Prefix
  - host: plugin.integration
    http:
      paths:
      - backend:
          service:
            name: idmgpl
            port:
              number: 8080
        path: /
        pathType: Prefix
  - host: model.integration
    http:
      paths:
      - backend:
          service:
            name: idmgml
            port:
              number: 8080
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafdrop-ingress
  namespace: kafdrop
spec:
  ingressClassName: nginx
  rules:
  - host: kafdrop.integration
    http:
      paths:
      - backend:
          service:
            name: kafdrop
            port:
              number: 80
        path: /kafdrop/
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.org/client-max-body-size: "0"
  name: mef-sog-uc1-ingress
  namespace: mef-sog-uc1-wl
spec:
  ingressClassName: nginx
  rules:
  - host: mef-sog-uc1.integration
    http:
      paths:
      - backend:
          service:
            name: scheduled-client-entrypoint
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: trust.cert-manager.io/v1alpha1
kind: Bundle
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: "-8"
  name: ca-bundle
spec:
  sources:
  - useDefaultCAs: true
  - configMap:
      key: ca.crt
      name: kube-root-ca.crt
  - secret:
      key: ca.crt
      name: root-secret
  target:
    additionalFormats:
      jks:
        key: ca.jks
    configMap:
      key: ca.crt
    namespaceSelector:
      matchLabels:
        create-ca-bundle: "true"
    secret:
      key: ca.crt
