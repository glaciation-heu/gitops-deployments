apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-storage
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path
provisioner: rancher.io/local-path
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-role
  namespace: local-path-storage
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - persistentvolumeclaims
  - configmaps
  - pods
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-bind
  namespace: local-path-storage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: v1
data:
  config.json: |-
    {
            "nodePathMap":[
            {
                    "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                    "paths":["/opt/local-path-provisioner"]
            }
            ]
    }
  helperPod.yaml: |-
    apiVersion: v1
    kind: Pod
    metadata:
      name: helper-pod
    spec:
      priorityClassName: system-node-critical
      tolerations:
        - key: node.kubernetes.io/disk-pressure
          operator: Exists
          effect: NoSchedule
      containers:
      - name: helper-pod
        image: busybox
        imagePullPolicy: IfNotPresent
  setup: |-
    #!/bin/sh
    set -eu
    mkdir -m 0777 -p "$VOL_DIR"
  teardown: |-
    #!/bin/sh
    set -eu
    rm -rf "$VOL_DIR"
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-config
  namespace: local-path-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-9"
  name: local-path-provisioner
  namespace: local-path-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-path-provisioner
  template:
    metadata:
      labels:
        app: local-path-provisioner
    spec:
      containers:
      - command:
        - local-path-provisioner
        - --debug
        - start
        - --config
        - /etc/config/config.json
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: rancher/local-path-provisioner:v0.0.26
        imagePullPolicy: IfNotPresent
        name: local-path-provisioner
        volumeMounts:
        - mountPath: /etc/config/
          name: config-volume
      serviceAccountName: local-path-provisioner-service-account
      volumes:
      - configMap:
          name: local-path-config
        name: config-volume
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: jena-fuseki
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: jena-fuseki
    helm:
      valuesObject:
        ingressHostName: jena-fuseki.integration
        persistence:
          size: 100Gi
        resources:
          limits:
            cpu: 500m
            memory: 4G
          requests:
            cpu: 500m
            memory: 4G
    repoURL: https://glaciation-heu.github.io/jena-fuseki/helm-charts/
    targetRevision: 1.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: jena-fuseki-exporter
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: jena-fuseki-exporter
    helm:
      valuesObject:
        resources:
          limits:
            cpu: 500m
            memory: 200M
          requests:
            cpu: 500m
            memory: 200M
    repoURL: https://glaciation-heu.github.io/jena-fuseki-exporter/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: jenkins
  namespace: argocd
spec:
  destination:
    namespace: jenkins
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: jenkins
    helm:
      valuesObject:
        additionalPlugins:
        - prometheus:819.v50953a_c560dd
        - nodejs:1.6.4
        - junit:1317.v5b_35d792b_06a_
        - pipeline-rest-api:2.37
        controller:
          JCasC:
            authorizationStrategy: |-
              loggedInUsersCanDoAnything:
                allowAnonymousRead: true
          admin:
            password: jenkins
            user: admin
        ingress:
          enabled: false
        persistence:
          enabled: true
          existingClaim: jenkins-pvc
    repoURL: https://charts.jenkins.io/
    targetRevision: 5.8.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: longhorn
  namespace: argocd
spec:
  destination:
    namespace: longhorn-system
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: longhorn
    helm:
      values: |
        preUpgradeChecker:
          jobEnabled: false
    repoURL: https://charts.longhorn.io/
    targetRevision: v1.6.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: nginx
  namespace: argocd
spec:
  destination:
    namespace: default
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: nginx-ingress
    helm:
      valuesObject:
        controller:
          config:
            entries:
              external-status-address: 10.1.14.160
              proxy-connect-timeout: 300s
              proxy-read-timeout: 300s
              proxy-send-timeout: 300s
          kind: deployment
          nodeSelector:
            master: "true"
          service:
            httpPort:
              enable: true
              nodePort: 31080
              port: 80
              targetPort: 80
            httpsPort:
              enable: true
              nodePort: 31443
              port: 443
              targetPort: 443
            type: NodePort
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Equal
    repoURL: ghcr.io/nginx/charts
    targetRevision: 2.0.1
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: nvidia-device-plugin
  namespace: argocd
spec:
  destination:
    namespace: nvidia-device-plugin
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: nvidia-device-plugin
    helm:
      valuesObject:
        gfd:
          enabled: true
    repoURL: https://nvidia.github.io/k8s-device-plugin/stable
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-ingress
  namespace: argocd
spec:
  ingressClassName: nginx
  rules:
  - host: argocd.integration
    http:
      paths:
      - backend:
          service:
            name: argocd-server
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-ingress
  namespace: jenkins
spec:
  ingressClassName: nginx
  rules:
  - host: jenkins.integration
    http:
      paths:
      - backend:
          service:
            name: jenkins
            port:
              number: 8080
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafdrop-ingress
  namespace: kafdrop
spec:
  ingressClassName: nginx
  rules:
  - host: kafdrop.integration
    http:
      paths:
      - backend:
          service:
            name: kafdrop
            port:
              number: 80
        path: /kafdrop/
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: longhorn-ingress
  namespace: longhorn-system
spec:
  ingressClassName: nginx
  rules:
  - host: longhorn.integration
    http:
      paths:
      - backend:
          service:
            name: longhorn-frontend
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.org/client-max-body-size: "0"
  name: mef-sog-uc1-ingress
  namespace: mef-sog-uc1-wl
spec:
  ingressClassName: nginx
  rules:
  - host: mef-sog-uc1.integration
    http:
      paths:
      - backend:
          service:
            name: scheduled-client-entrypoint
            port:
              number: 80
        path: /
        pathType: Prefix
