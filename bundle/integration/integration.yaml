apiVersion: v1
kind: Namespace
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-storage
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path
provisioner: rancher.io/local-path
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: accounts.jetstream.nats.io
spec:
  group: jetstream.nats.io
  names:
    kind: Account
    plural: accounts
    singular: account
  scope: Namespaced
  versions:
  - name: v1beta2
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              creds:
                description: The creds to be used to connect to the NATS Service.
                properties:
                  file:
                    description: Credentials file, generated with github.com/nats-io/nsc
                      tool.
                    type: string
                  secret:
                    properties:
                      name:
                        description: Name of the secret with the creds.
                        type: string
                    type: object
                type: object
              name:
                description: A unique name for the Account.
                minLength: 1
                pattern: ^[^.*>]*$
                type: string
              servers:
                description: A list of servers to connect.
                items:
                  minLength: 1
                  type: string
                minLength: 1
                type: array
              tls:
                description: The TLS certs to be used to connect to the NATS Service.
                properties:
                  ca:
                    description: Filename of the Root CA of the TLS cert.
                    type: string
                  cert:
                    description: Filename of the TLS cert.
                    type: string
                  key:
                    description: Filename of the TLS cert key.
                    type: string
                  secret:
                    properties:
                      name:
                        description: Name of the TLS secret with the certs.
                        type: string
                    type: object
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: consumers.jetstream.nats.io
spec:
  group: jetstream.nats.io
  names:
    kind: Consumer
    plural: consumers
    singular: consumer
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The current state of the consumer.
      jsonPath: .status.conditions[?(@.type == 'Ready')].reason
      name: State
      type: string
    - description: The name of the Jetstream Stream.
      jsonPath: .spec.streamName
      name: Stream
      type: string
    - description: The name of the Jetstream Consumer.
      jsonPath: .spec.durableName
      name: Consumer
      type: string
    - description: The ack policy.
      jsonPath: .spec.ackPolicy
      name: Ack Policy
      type: string
    name: v1beta2
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              account:
                description: Name of the account to which the Consumer belongs.
                pattern: ^[^.*>]*$
                type: string
              ackPolicy:
                default: none
                description: How messages should be acknowledged.
                enum:
                - none
                - all
                - explicit
                type: string
              ackWait:
                default: 1ns
                description: How long to allow messages to remain un-acknowledged
                  before attempting redelivery.
                type: string
              backoff:
                description: List of durations representing a retry time scale for
                  NaK'd or retried messages
                items:
                  type: string
                type: array
              creds:
                default: ""
                description: NATS user credentials for connecting to servers. Please
                  make sure your controller has mounted the cerds on its path.
                type: string
              deliverGroup:
                description: The name of a queue group.
                type: string
              deliverPolicy:
                default: all
                enum:
                - all
                - last
                - new
                - byStartSequence
                - byStartTime
                type: string
              deliverSubject:
                description: The subject to deliver observed messages, when not set,
                  a pull-based Consumer is created.
                type: string
              description:
                description: The description of the consumer.
                type: string
              durableName:
                description: The name of the Consumer.
                minLength: 1
                pattern: ^[^.*>]+$
                type: string
              filterSubject:
                description: Select only a specific incoming subjects, supports wildcards.
                type: string
              filterSubjects:
                description: List of incoming subjects, supports wildcards. Available
                  since 2.10.
                items:
                  type: string
                type: array
              flowControl:
                default: false
                description: Enables flow control.
                type: boolean
              headersOnly:
                default: false
                description: When set, only the headers of messages in the stream
                  are delivered, and not the bodies. Additionally, Nats-Msg-Size header
                  is added to indicate the size of the removed payload
                type: boolean
              heartbeatInterval:
                description: The interval used to deliver idle heartbeats for push-based
                  consumers, in Go's time.Duration format.
                type: string
              maxAckPending:
                description: Maximum pending Acks before consumers are paused.
                type: integer
              maxDeliver:
                minimum: -1
                type: integer
              maxRequestBatch:
                description: The largest batch property that may be specified when
                  doing a pull on a Pull Consumer.
                type: integer
              maxRequestExpires:
                description: The maximum expires duration that may be set when doing
                  a pull on a Pull Consumer.
                type: string
              maxRequestMaxBytes:
                description: The maximum max_bytes value that maybe set when dong
                  a pull on a Pull Consumer.
                type: integer
              maxWaiting:
                description: The number of pulls that can be outstanding on a pull
                  consumer, pulls received after this is reached are ignored.
                type: integer
              memStorage:
                default: false
                description: Force the consumer state to be kept in memory rather
                  than inherit the setting from the stream.
                type: boolean
              metadata:
                additionalProperties:
                  type: string
                description: Additional Consumer metadata.
                type: object
              nkey:
                default: ""
                description: NATS user NKey for connecting to servers.
                type: string
              optStartSeq:
                minimum: 0
                type: integer
              optStartTime:
                description: Time format must be RFC3339.
                type: string
              preventDelete:
                default: false
                description: When true, the managed Consumer will not be deleted when
                  the resource is deleted
                type: boolean
              preventUpdate:
                default: false
                description: When true, the managed Consumer will not be updated when
                  the resource is updated
                type: boolean
              rateLimitBps:
                description: rate at which messages will be delivered to clients,
                  expressed in bit per second.
                type: integer
              replayPolicy:
                default: instant
                description: How messages are sent.
                enum:
                - instant
                - original
                type: string
              replicas:
                description: When set do not inherit the replica count from the stream
                  but specifically set it to this amount.
                type: integer
              sampleFreq:
                description: What percentage of acknowledgements should be samples
                  for observability.
                type: string
              servers:
                default: []
                description: A list of servers for creating consumer
                items:
                  type: string
                type: array
              streamName:
                description: The name of the Stream to create the Consumer in.
                type: string
              tls:
                description: A client's TLS certs and keys.
                properties:
                  clientCert:
                    description: A client's cert filepath. Should be mounted.
                    type: string
                  clientKey:
                    description: A client's key filepath. Should be mounted.
                    type: string
                  rootCas:
                    description: A list of filepaths to CAs. Should be mounted.
                    items:
                      type: string
                    type: array
                type: object
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              observedGeneration:
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: The current state of the consumer.
      jsonPath: .status.conditions[?(@.type == 'Ready')].reason
      name: State
      type: string
    - description: The name of the Jetstream Stream.
      jsonPath: .spec.streamName
      name: Stream
      type: string
    - description: The name of the Jetstream Consumer.
      jsonPath: .spec.durableName
      name: Consumer
      type: string
    - description: The ack policy.
      jsonPath: .spec.ackPolicy
      name: Ack Policy
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              ackPolicy:
                default: none
                description: How messages should be acknowledged.
                enum:
                - none
                - all
                - explicit
                type: string
              ackWait:
                default: 1ns
                description: How long to allow messages to remain un-acknowledged
                  before attempting redelivery.
                type: string
              deliverGroup:
                description: The name of a queue group.
                type: string
              deliverPolicy:
                default: all
                enum:
                - all
                - last
                - new
                - byStartSequence
                - byStartTime
                type: string
              deliverSubject:
                description: The subject to deliver observed messages, when not set,
                  a pull-based Consumer is created.
                type: string
              description:
                description: The description of the consumer.
                type: string
              durableName:
                description: The name of the Consumer.
                minLength: 1
                pattern: ^[^.*>]+$
                type: string
              filterSubject:
                description: Select only a specific incoming subjects, supports wildcards.
                type: string
              flowControl:
                default: false
                description: Enables flow control.
                type: boolean
              heartbeatInterval:
                description: The interval used to deliver idle heartbeats for push-based
                  consumers, in Go's time.Duration format.
                type: string
              maxAckPending:
                description: Maximum pending Acks before consumers are paused.
                type: integer
              maxDeliver:
                minimum: -1
                type: integer
              optStartSeq:
                minimum: 0
                type: integer
              optStartTime:
                description: Time format must be RFC3339.
                type: string
              rateLimitBps:
                description: rate at which messages will be delivered to clients,
                  expressed in bit per second.
                type: integer
              replayPolicy:
                default: instant
                description: How messages are sent.
                enum:
                - instant
                - original
                type: string
              sampleFreq:
                description: What percentage of acknowledgements should be samples
                  for observability.
                type: string
              streamName:
                description: The name of the Stream to create the Consumer in.
                type: string
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              observedGeneration:
                type: integer
            type: object
        type: object
    served: false
    storage: false
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: streams.jetstream.nats.io
spec:
  group: jetstream.nats.io
  names:
    kind: Stream
    plural: streams
    singular: stream
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The current state of the stream.
      jsonPath: .status.conditions[?(@.type == 'Ready')].reason
      name: State
      type: string
    - description: The name of the Jetstream Stream.
      jsonPath: .spec.name
      name: Stream Name
      type: string
    - description: The subjects this Stream produces.
      jsonPath: .spec.subjects
      name: Subjects
      type: string
    name: v1beta2
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              account:
                description: Name of the account to which the Stream belongs.
                pattern: ^[^.*>]*$
                type: string
              allowDirect:
                default: false
                description: When true, allow higher performance, direct access to
                  get individual messages
                type: boolean
              allowRollup:
                default: false
                description: When true, allows the use of the Nats-Rollup header to
                  replace all contents of a stream, or subject in a stream, with a
                  single new message.
                type: boolean
              compression:
                default: ""
                description: Stream specific compression.
                enum:
                - s2
                - none
                - ""
                type: string
              creds:
                default: ""
                description: NATS user credentials for connecting to servers. Please
                  make sure your controller has mounted the cerds on its path.
                type: string
              denyDelete:
                default: false
                description: When true, restricts the ability to delete messages from
                  a stream via the API. Cannot be changed once set to true.
                type: boolean
              denyPurge:
                default: false
                description: When true, restricts the ability to purge a stream via
                  the API. Cannot be changed once set to true.
                type: boolean
              description:
                description: The description of the stream.
                type: string
              discard:
                default: old
                description: When a Stream reach it's limits either old messages are
                  deleted or new ones are denied.
                enum:
                - old
                - new
                type: string
              discardPerSubject:
                default: false
                description: Allows to discard messages on a subject basis.
                type: boolean
              duplicateWindow:
                description: The duration window to track duplicate messages for.
                type: string
              firstSequence:
                default: 0
                description: Sequence number from which the Stream will start.
                type: number
              maxAge:
                default: ""
                description: Maximum age of any message in the stream, expressed in
                  Go's time.Duration format. Empty for unlimited.
                type: string
              maxBytes:
                default: -1
                description: How big the Stream may be, when the combined stream size
                  exceeds this old messages are removed. -1 for unlimited.
                minimum: -1
                type: integer
              maxConsumers:
                default: -1
                description: How many Consumers can be defined for a given Stream.
                  -1 for unlimited.
                minimum: -1
                type: integer
              maxMsgSize:
                default: -1
                description: The largest message that will be accepted by the Stream.
                  -1 for unlimited.
                minimum: -1
                type: integer
              maxMsgs:
                default: -1
                description: How many messages may be in a Stream, oldest messages
                  will be removed if the Stream exceeds this size. -1 for unlimited.
                minimum: -1
                type: integer
              maxMsgsPerSubject:
                default: 0
                description: The maximum of messages per subject.
                type: integer
              metadata:
                additionalProperties:
                  type: string
                description: Additional Stream metadata.
                type: object
              mirror:
                description: A stream mirror.
                properties:
                  externalApiPrefix:
                    type: string
                  externalDeliverPrefix:
                    type: string
                  filterSubject:
                    type: string
                  name:
                    type: string
                  optStartSeq:
                    type: integer
                  optStartTime:
                    description: Time format must be RFC3339.
                    type: string
                  subjectTransforms:
                    description: List of subject transforms for this mirror.
                    items:
                      description: A subject transform pair.
                      properties:
                        dest:
                          description: Destination subject.
                          type: string
                        source:
                          description: Source subject.
                          type: string
                      type: object
                    type: array
                type: object
              name:
                description: A unique name for the Stream.
                minLength: 1
                pattern: ^[^.*>]*$
                type: string
              nkey:
                default: ""
                description: NATS user NKey for connecting to servers.
                type: string
              noAck:
                default: false
                description: Disables acknowledging messages that are received by
                  the Stream.
                type: boolean
              placement:
                description: A stream's placement.
                properties:
                  cluster:
                    type: string
                  tags:
                    items:
                      type: string
                    type: array
                type: object
              preventDelete:
                default: false
                description: When true, the managed Stream will not be deleted when
                  the resource is deleted
                type: boolean
              preventUpdate:
                default: false
                description: When true, the managed Stream will not be updated when
                  the resource is updated
                type: boolean
              replicas:
                default: 1
                description: How many replicas to keep for each message.
                minimum: 1
                type: integer
              republish:
                description: Republish configuration of the stream.
                properties:
                  destination:
                    description: Messages will be additionally published to that subject.
                    type: string
                  source:
                    description: Messages will be published from that subject to the
                      destination subject.
                    type: string
                type: object
              retention:
                default: limits
                description: How messages are retained in the Stream, once this is
                  exceeded old messages are removed.
                enum:
                - limits
                - interest
                - workqueue
                type: string
              servers:
                default: []
                description: A list of servers for creating stream
                items:
                  type: string
                type: array
              sources:
                description: A stream's sources.
                items:
                  properties:
                    externalApiPrefix:
                      type: string
                    externalDeliverPrefix:
                      type: string
                    filterSubject:
                      type: string
                    name:
                      type: string
                    optStartSeq:
                      type: integer
                    optStartTime:
                      description: Time format must be RFC3339.
                      type: string
                    subjectTransforms:
                      description: List of subject transforms for this mirror.
                      items:
                        description: A subject transform pair.
                        properties:
                          dest:
                            description: Destination subject.
                            type: string
                          source:
                            description: Source subject.
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
              storage:
                default: memory
                description: The storage backend to use for the Stream.
                enum:
                - file
                - memory
                type: string
              subjectTransform:
                description: SubjectTransform is for applying a subject transform
                  (to matching messages) when a new message is received
                properties:
                  dest:
                    description: Destination subject to transform into
                    type: string
                  source:
                    description: Source subject
                    type: string
                type: object
              subjects:
                description: A list of subjects to consume, supports wildcards.
                items:
                  minLength: 1
                  type: string
                minLength: 1
                type: array
              tls:
                description: A client's TLS certs and keys.
                properties:
                  clientCert:
                    description: A client's cert filepath. Should be mounted.
                    type: string
                  clientKey:
                    description: A client's key filepath. Should be mounted.
                    type: string
                  rootCas:
                    description: A list of filepaths to CAs. Should be mounted.
                    items:
                      type: string
                    type: array
                type: object
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              observedGeneration:
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
  - additionalPrinterColumns:
    - description: The current state of the stream.
      jsonPath: .status.conditions[?(@.type == 'Ready')].reason
      name: State
      type: string
    - description: The name of the Jetstream Stream.
      jsonPath: .spec.name
      name: Stream Name
      type: string
    - description: The subjects this Stream produces.
      jsonPath: .spec.subjects
      name: Subjects
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              description:
                description: The description of the stream.
                type: string
              discard:
                default: old
                description: When a Stream reach it's limits either old messages are
                  deleted or new ones are denied.
                enum:
                - old
                - new
                type: string
              duplicateWindow:
                description: The duration window to track duplicate messages for.
                type: string
              maxAge:
                default: ""
                description: Maximum age of any message in the stream, expressed in
                  Go's time.Duration format. Empty for unlimited.
                type: string
              maxBytes:
                default: -1
                description: How big the Stream may be, when the combined stream size
                  exceeds this old messages are removed. -1 for unlimited.
                minimum: -1
                type: integer
              maxConsumers:
                default: -1
                description: How many Consumers can be defined for a given Stream.
                  -1 for unlimited.
                minimum: -1
                type: integer
              maxMsgSize:
                default: -1
                description: The largest message that will be accepted by the Stream.
                  -1 for unlimited.
                minimum: -1
                type: integer
              maxMsgs:
                default: -1
                description: How many messages may be in a Stream, oldest messages
                  will be removed if the Stream exceeds this size. -1 for unlimited.
                minimum: -1
                type: integer
              maxMsgsPerSubject:
                default: 0
                description: The maximum of messages per subject.
                type: integer
              mirror:
                description: A stream mirror.
                properties:
                  externalApiPrefix:
                    type: string
                  externalDeliverPrefix:
                    type: string
                  filterSubject:
                    type: string
                  name:
                    type: string
                  optStartSeq:
                    type: integer
                  optStartTime:
                    description: Time format must be RFC3339.
                    type: string
                type: object
              name:
                description: A unique name for the Stream.
                minLength: 1
                pattern: ^[^.*>]*$
                type: string
              noAck:
                default: false
                description: Disables acknowledging messages that are received by
                  the Stream.
                type: boolean
              placement:
                description: A stream's placement.
                properties:
                  cluster:
                    type: string
                  tags:
                    items:
                      type: string
                    type: array
                type: object
              replicas:
                default: 1
                description: How many replicas to keep for each message.
                minimum: 1
                type: integer
              retention:
                default: limits
                description: How messages are retained in the Stream, once this is
                  exceeded old messages are removed.
                enum:
                - limits
                - interest
                - workqueue
                type: string
              sources:
                description: A stream's sources.
                items:
                  properties:
                    externalApiPrefix:
                      type: string
                    externalDeliverPrefix:
                      type: string
                    filterSubject:
                      type: string
                    name:
                      type: string
                    optStartSeq:
                      type: integer
                    optStartTime:
                      description: Time format must be RFC3339.
                      type: string
                  type: object
                type: array
              storage:
                default: memory
                description: The storage backend to use for the Stream.
                enum:
                - file
                - memory
                type: string
              subjects:
                description: A list of subjects to consume, supports wildcards.
                items:
                  minLength: 1
                  type: string
                minLength: 1
                type: array
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              observedGeneration:
                type: integer
            type: object
        type: object
    served: false
    storage: false
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: streamtemplates.jetstream.nats.io
spec:
  group: jetstream.nats.io
  names:
    kind: StreamTemplate
    plural: streamtemplates
    singular: streamtemplate
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: The current state of the stream.
      jsonPath: .status.conditions[?(@.type == 'Ready')].reason
      name: State
      type: string
    - description: The name of the Jetstream Stream Template.
      jsonPath: .spec.name
      name: Stream Template Name
      type: string
    - description: The subjects this Stream produces.
      jsonPath: .spec.subjects
      name: Subjects
      type: string
    name: v1beta1
    schema:
      openAPIV3Schema:
        properties:
          spec:
            properties:
              discard:
                default: old
                description: When a Stream reach it's limits either old messages are
                  deleted or new ones are denied.
                enum:
                - old
                - new
                type: string
              duplicateWindow:
                description: The duration window to track duplicate messages for.
                type: string
              maxAge:
                default: ""
                description: Maximum age of any message in the stream, expressed in
                  Go's time.Duration format. Empty for unlimited.
                type: string
              maxBytes:
                default: -1
                description: How big the Stream may be, when the combined stream size
                  exceeds this old messages are removed. -1 for unlimited.
                minimum: -1
                type: integer
              maxConsumers:
                default: -1
                description: How many Consumers can be defined for a given Stream.
                  -1 for unlimited.
                minimum: -1
                type: integer
              maxMsgSize:
                default: -1
                description: The largest message that will be accepted by the Stream.
                  -1 for unlimited.
                minimum: -1
                type: integer
              maxMsgs:
                default: -1
                description: How many messages may be in a Stream, oldest messages
                  will be removed if the Stream exceeds this size. -1 for unlimited.
                minimum: -1
                type: integer
              maxStreams:
                default: -1
                description: The maximum number of Streams this Template can create,
                  -1 for unlimited.
                minimum: -1
                type: integer
              name:
                description: A unique name for the Stream Template.
                minLength: 1
                pattern: ^[^.*>]*$
                type: string
              noAck:
                default: false
                description: Disables acknowledging messages that are received by
                  the Stream.
                type: boolean
              replicas:
                default: 1
                description: How many replicas to keep for each message.
                minimum: 1
                type: integer
              retention:
                default: limits
                description: How messages are retained in the Stream, once this is
                  exceeded old messages are removed.
                enum:
                - limits
                - interest
                - workqueue
                type: string
              storage:
                default: memory
                description: The storage backend to use for the Stream.
                enum:
                - file
                - memory
                type: string
              subjects:
                description: A list of subjects to consume, supports wildcards.
                items:
                  minLength: 1
                  type: string
                minLength: 1
                type: array
            type: object
          status:
            properties:
              conditions:
                items:
                  properties:
                    lastTransitionTime:
                      type: string
                    message:
                      type: string
                    reason:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: array
              observedGeneration:
                type: integer
            type: object
        type: object
    served: false
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-role
  namespace: local-path-storage
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-role
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - persistentvolumeclaims
  - configmaps
  - pods
  - pods/log
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - get
  - list
  - watch
  - create
  - patch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - storage.k8s.io
  resources:
  - storageclasses
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: metrics-server
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: system:aggregated-metrics-reader
rules:
- apiGroups:
  - metrics.k8s.io
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    k8s-app: metrics-server
  name: system:metrics-server
rules:
- apiGroups:
  - ""
  resources:
  - nodes/metrics
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - pods
  - nodes
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server-auth-reader
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-bind
  namespace: local-path-storage
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-provisioner-bind
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: local-path-provisioner-role
subjects:
- kind: ServiceAccount
  name: local-path-provisioner-service-account
  namespace: local-path-storage
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server:system:auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    k8s-app: metrics-server
  name: system:metrics-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:metrics-server
subjects:
- kind: ServiceAccount
  name: metrics-server
  namespace: kube-system
---
apiVersion: v1
data:
  config.json: |-
    {
            "nodePathMap":[
            {
                    "node":"DEFAULT_PATH_FOR_NON_LISTED_NODES",
                    "paths":["/opt/local-path-provisioner"]
            }
            ]
    }
  helperPod.yaml: |-
    apiVersion: v1
    kind: Pod
    metadata:
      name: helper-pod
    spec:
      priorityClassName: system-node-critical
      tolerations:
        - key: node.kubernetes.io/disk-pressure
          operator: Exists
          effect: NoSchedule
      containers:
      - name: helper-pod
        image: busybox
        imagePullPolicy: IfNotPresent
  setup: |-
    #!/bin/sh
    set -eu
    mkdir -m 0777 -p "$VOL_DIR"
  teardown: |-
    #!/bin/sh
    set -eu
    rm -rf "$VOL_DIR"
kind: ConfigMap
metadata:
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/sync-wave: "-10"
  name: local-path-config
  namespace: local-path-storage
---
apiVersion: v1
kind: Service
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    k8s-app: metrics-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: metrics-server
  name: metrics-server
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: metrics-server
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        k8s-app: metrics-server
    spec:
      containers:
      - args:
        - --cert-dir=/tmp
        - --secure-port=10250
        - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
        - --kubelet-use-node-status-port
        - --metric-resolution=15s
        - --kubelet-insecure-tls=true
        image: registry.k8s.io/metrics-server/metrics-server:v0.7.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /livez
            port: https
            scheme: HTTPS
          periodSeconds: 10
        name: metrics-server
        ports:
        - containerPort: 10250
          name: https
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: https
            scheme: HTTPS
          initialDelaySeconds: 20
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /tmp
          name: tmp-dir
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-cluster-critical
      serviceAccountName: metrics-server
      volumes:
      - emptyDir: {}
        name: tmp-dir
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-9"
  name: local-path-provisioner
  namespace: local-path-storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: local-path-provisioner
  template:
    metadata:
      labels:
        app: local-path-provisioner
    spec:
      containers:
      - command:
        - local-path-provisioner
        - --debug
        - start
        - --config
        - /etc/config/config.json
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: rancher/local-path-provisioner:v0.0.26
        imagePullPolicy: IfNotPresent
        name: local-path-provisioner
        volumeMounts:
        - mountPath: /etc/config/
          name: config-volume
      serviceAccountName: local-path-provisioner-service-account
      volumes:
      - configMap:
          name: local-path-config
        name: config-volume
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  labels:
    k8s-app: metrics-server
  name: v1beta1.metrics.k8s.io
spec:
  group: metrics.k8s.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: metrics-server
    namespace: kube-system
  version: v1beta1
  versionPriority: 100
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-12"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: admission-control
  namespace: argocd
spec:
  destination:
    namespace: gatekeeper-system
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: admission-control
    repoURL: https://glaciation-heu.github.io/security/helm-charts
    targetRevision: 1.0.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "-11"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: certificate-management
  namespace: argocd
spec:
  destination:
    namespace: cert-manager
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: certificate-management
    repoURL: https://glaciation-heu.github.io/security/helm-charts
    targetRevision: 1.0.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: data-sanitization
  namespace: argocd
spec:
  destination:
    namespace: spark-operator
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: data-sanitization
    helm:
      valuesObject:
        data-sanitization:
          ingress:
            annotations:
              cert-manager.io/cluster-issuer: private-ca-issuer
            className: nginx
            enabled: true
            hosts:
            - host: data-sanitization.integration
              paths:
              - path: /
                pathType: Prefix
            tls:
            - hosts:
              - data-sanitization.integration
              secretName: data-sanitization-ingress
        spark-history-server:
          ingress:
            annotations:
              cert-manager.io/cluster-issuer: private-ca-issuer
            className: nginx
            enabled: true
            hosts:
            - host: spark-history-server.integration
              paths:
              - path: /
                pathType: Prefix
            tls:
            - hosts:
              - spark-history-server.integration
              secretName: spark-history-server-ingress
    repoURL: https://glaciation-heu.github.io/security/helm-charts
    targetRevision: 1.0.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: data-storage-service
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: data-storage-service
    helm:
      valuesObject:
        ingressHostName: data-storage.integration
    repoURL: https://glaciation-heu.github.io/glaciation-data-storage-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: data-storage-service-db
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: data-storage-service-DB
    helm:
      valuesObject:
        ingressHostName: dss-db.integration
    repoURL: https://glaciation-heu.github.io/glaciation-dssdb/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: data-wrapping
  namespace: argocd
spec:
  destination:
    namespace: data-wrapping
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: data-wrapping
    helm:
      valuesObject:
        tenant:
          ingress:
            api:
              annotations:
                cert-manager.io/cluster-issuer: private-ca-issuer
                ingress.kubernetes.io/ssl-redirect: "true"
                nginx.org/redirect-to-https: "true"
                nginx.org/ssl-services: minio
              enabled: true
              host: glaciation-tenant.integration
              ingressClassName: nginx
              path: /
              pathType: Prefix
              tls:
              - hosts:
                - glaciation-tenant.integration
                secretName: minio-tenant-ingress
            console:
              annotations:
                cert-manager.io/cluster-issuer: private-ca-issuer
                ingress.kubernetes.io/ssl-redirect: "true"
                nginx.org/redirect-to-https: "true"
                nginx.org/ssl-services: glaciation-console
              enabled: true
              host: glaciation-tenant-console.integration
              ingressClassName: nginx
              path: /
              pathType: Prefix
              tls:
              - hosts:
                - glaciation-tenant-console.integration
                secretName: minio-tenant-console-ingress
        vault:
          server:
            auditStorage:
              size: 1Gi
              storageClass: longhorn
            dataStorage:
              size: 1Gi
              storageClass: longhorn
            ingress:
              activeService: false
              annotations:
                cert-manager.io/cluster-issuer: private-ca-issuer
                ingress.kubernetes.io/ssl-redirect: "true"
                nginx.org/redirect-to-https: "true"
                nginx.org/ssl-services: data-wrapping-vault
              enabled: true
              hosts:
              - host: vault.integration
              ingressClassName: nginx
              tls:
              - hosts:
                - vault.integration
                secretName: vault-ingress
    repoURL: https://glaciation-heu.github.io/security/helm-charts
    targetRevision: 1.0.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=false
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: dkg-tenant
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: tenant
    helm:
      valuesObject:
        ingress:
          api:
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            enabled: true
            host: dkg-tenant.integration
            ingressClassName: nginx
            path: /
            pathType: Prefix
          console:
            annotations:
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
            enabled: true
            host: dkg-tenant-console.integration
            ingressClassName: nginx
            path: /
            pathType: Prefix
        secrets:
          accessKey: minio
          name: dkg-env-configuration
          secretKey: minio123
        tenant:
          buckets:
          - name: one
          - name: two
          - name: three
          certificate:
            requestAutoCert: false
          configuration:
            name: dkg-env-configuration
          name: dkg
          pools:
          - name: dkg-pool
            resources:
              limits:
                cpu: 2
                memory: 4Gi
              requests:
                cpu: 1
                memory: 2Gi
            servers: 2
            size: 1Gi
            storageClassName: local-path
            volumesPerServer: 2
    repoURL: https://operator.min.io
    targetRevision: 5.0.14
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: gatekeeper-policy-manager
  namespace: argocd
spec:
  destination:
    namespace: gatekeeper-system
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: gatekeeper-policy-manager
    helm:
      valuesObject:
        config:
          secretKey: supersecuresecretkey
        ingress:
          annotations:
            cert-manager.io/cluster-issuer: private-ca-issuer
          enabled: true
          hosts:
          - host: gpm.integration
            pathType: Prefix
            paths:
            - /
          ingressClassName: nginx
          tls:
          - hosts:
            - gpm.integration
            secretName: gpm-ingress
    repoURL: https://sighupio.github.io/gatekeeper-policy-manager
    targetRevision: 0.10.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: idmg-decision-engine
  namespace: argocd
spec:
  destination:
    namespace: idmg
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: cf
    helm:
      valuesObject:
        ingress:
          hosts:
            dataGenerator: data-generator.integration
            databaseController: database-controller.integration
            model: model.integration
            plugin: plugin.integration
    repoURL: https://idmg-pub.gitlab.io/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: jena-fuseki
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: jena-fuseki
    helm:
      valuesObject:
        ingressHostName: jena-fuseki.integration
        persistence:
          size: 100Gi
        resources:
          limits:
            cpu: 500m
            memory: 4G
          requests:
            cpu: 500m
            memory: 4G
    repoURL: https://glaciation-heu.github.io/jena-fuseki/helm-charts/
    targetRevision: 1.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: jena-fuseki-exporter
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: jena-fuseki-exporter
    helm:
      valuesObject:
        resources:
          limits:
            cpu: 500m
            memory: 200M
          requests:
            cpu: 500m
            memory: 200M
    repoURL: https://glaciation-heu.github.io/jena-fuseki-exporter/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: jenkins
  namespace: argocd
spec:
  destination:
    namespace: jenkins
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: jenkins
    helm:
      valuesObject:
        controller:
          JCasC:
            authorizationStrategy: |-
              loggedInUsersCanDoAnything:
                allowAnonymousRead: true
          admin:
            password: jenkins
            user: admin
        ingress:
          enabled: false
        persistence:
          enabled: true
          existingClaim: jenkins-pvc
    repoURL: https://charts.jenkins.io/
    targetRevision: 5.8.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kafdrop
  namespace: argocd
spec:
  destination:
    namespace: kafdrop
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: kafdrop
    helm:
      values: |
        server:
          servlet:
            contextPath: /kafdrop
        service:
          annotations: {}
          type: ClusterIP
          port: 80
        kafka:
          brokerConnect: kafka.kafka.svc.cluster.local:9092
        resources:
          requests:
            cpu: 1m
            memory: 128Mi
            nvidia.com/gpu: 0
            ephemeral-storage: 1Mi
          limits:
            cpu: 1
            memory: 1Gi
            nvidia.com/gpu: 0
            ephemeral-storage: 10Mi
        jvm:
          opts: '-Xms32M -Xmx64M'
    repoURL: https://glaciation-heu.github.io/mef-sog-uc1/
    targetRevision: 0.1.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true,IncludeMutationWebhook=true
  name: kafka
  namespace: argocd
spec:
  destination:
    namespace: kafka
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: kafka
    helm:
      values: |
        image:
          tag: 3.5.1-debian-11-r25
          pullPolicy: Always

        kraft:
          enabled: false

        auth:
          interBrokerProtocol: plaintext

        broker:
          replicaCount: 3
          podAntiAffinityPreset: hard
          persistence:
            enabled: true
            storageClass: longhorn
            accessModes:
              - ReadWriteOnce
            size: 2Gi
          resources:
            requests:
              cpu: 1
              memory: 2Gi
              nvidia.com/gpu: 0
              ephemeral-storage: 5Mi
            limits:
              cpu: 1
              memory: 2Gi
              nvidia.com/gpu: 0
              ephemeral-storage: 20Mi

        controller:
          replicaCount: 0

        zookeeper:
          enabled: true
          replicaCount: 3
          podAntiAffinityPreset: hard
          persistence:
            enabled: true
            storageClass: longhorn
            accessModes:
              - ReadWriteOnce
            size: 5Gi
          resources:
            requests:
              cpu: 1
              memory: 2Gi
              nvidia.com/gpu: 0
              ephemeral-storage: 1Mi
            limits:
              cpu: 1
              memory: 2Gi
              nvidia.com/gpu: 0
              ephemeral-storage: 5Mi

        listeners:
          client:
            protocol: plaintext

          interbroker:
            protocol: plaintext

          external:
            protocol: plaintext

        externalAccess:
          enabled: false
    repoURL: https://glaciation-heu.github.io/mef-sog-uc1/
    targetRevision: 28.0.4
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: keda
  namespace: argocd
spec:
  destination:
    namespace: keda
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: keda
    helm:
      values: |
        resources:
          operator:
            limits:
              cpu: 1
              memory: 1000Mi
              nvidia.com/gpu: 0
              ephemeral-storage: 5Mi
            requests:
              cpu: 100m
              memory: 100Mi
              nvidia.com/gpu: 0
              ephemeral-storage: 1Mi
          metricServer:
            limits:
              cpu: 1
              memory: 1000Mi
              nvidia.com/gpu: 0
              ephemeral-storage: 5Mi
            requests:
              cpu: 100m
              memory: 100Mi
              nvidia.com/gpu: 0
              ephemeral-storage: 1Mi
          webhooks:
            limits:
              cpu: 1
              memory: 1000Mi
              nvidia.com/gpu: 0
              ephemeral-storage: 5Mi
            requests:
              cpu: 100m
              memory: 100Mi
              nvidia.com/gpu: 0
              ephemeral-storage: 1Mi
    repoURL: https://kedacore.github.io/charts
    targetRevision: 2.14.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: kg-exporter
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: kg-exporter
    helm:
      valuesObject:
        ingressHostName: kg-exporter.integration
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        settings:
          builder:
            builder_tick_seconds: 60
            is_single_slice: true
            node_port: 80
            queries:
              node_queries:
              - measurement_id: Energy.Usage
                property: Energy.Usage
                query: |
                  label_replace(
                    irate(kepler_node_platform_joules_total[1m] @{{now}}),
                    "resource",
                    "$1",
                    "exported_instance",
                    "(.+)"
                  )
                result_parser: PROMETHEUS_PARSER
                source: Kepler
                unit: milliwatts
              - aggregation:
                  function: average
                  period_seconds: 60
                measurement_id: Available
                property: CPU.Available
                query: |
                  label_replace(
                    sum(
                      rate(
                        node_cpu_seconds_total{mode="idle", service="monitoring-stack-prometheus-node-exporter"}[1m] @{{now}}
                      )
                    ) by (node),
                    "resource",
                    "$1",
                    "node",
                    "(.+)"
                  )
                result_parser: PROMETHEUS_PARSER
                source: NodeExporter
                subresource: CPU
                unit: Core
              - measurement_id: Available
                property: RAM.Available
                query: |
                  label_replace(
                    node_memory_MemFree_bytes{service="monitoring-stack-prometheus-node-exporter"} @{{now}},
                    "resource",
                    "$1",
                    "node",
                    "(.+)"
                  )
                result_parser: PROMETHEUS_PARSER
                source: NodeExporter
                subresource: RAM
                unit: bytes
              - measurement_id: Available
                property: Storage.Available
                query: |
                  label_replace(
                    ephemeral_storage_node_available @{{now}},
                    "resource",
                    "$1",
                    "node_name",
                    "(.+)"
                  )
                result_parser: PROMETHEUS_PARSER
                source: k8s-ephemeral-storage-metrics
                subresource: Storage
                unit: bytes
              pod_queries: []
            single_slice_url: http://metadata-service:80
          k8s:
            in_cluster: true
          metadata:
            metadata_service_url: metadata-service
          prometheus:
            endpoint_port: 8080
          prometheus_client:
            url: http://monitoring-stack-prometheus-server.monitoring
    repoURL: https://glaciation-heu.github.io/kg_exporter/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: longhorn
  namespace: argocd
spec:
  destination:
    namespace: longhorn-system
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: longhorn
    helm:
      values: |
        preUpgradeChecker:
          jobEnabled: false
    repoURL: https://charts.longhorn.io/
    targetRevision: v1.6.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mef-sog-uc1-wl
  namespace: argocd
spec:
  destination:
    namespace: mef-sog-uc1-wl
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: mef-sog-uc1-wl
    helm:
      values: |
        scheduledClient:
          service:
            type: ClusterIP
            port: 80
        elaborationTimbMs:
          logLevelJpa: true
    repoURL: https://glaciation-heu.github.io/mef-sog-uc1/
    targetRevision: 2.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: metadata-service
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: metadata-service
    helm:
      valuesObject:
        ingressHostName: metadata.integration
    repoURL: https://glaciation-heu.github.io/glaciation-metadata-service/helm-charts/
    targetRevision: 1.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: minio
  namespace: argocd
spec:
  destination:
    namespace: minio-operator
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: operator
    helm:
      valuesObject:
        console:
          ingress:
            enabled: false
        tenants: []
    repoURL: https://operator.min.io
    targetRevision: 5.0.14
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: monitoring-stack
  namespace: argocd
spec:
  destination:
    namespace: monitoring
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: monitoring-stack
    helm:
      valuesObject:
        grafana:
          adminPassword: donkeyhot
          grafana.ini:
            auth:
              signout_redirect_url: /
            auth.anonymous:
              enabled: true
            security:
              allow_embedding: true
            users:
              viewers_can_edit: true
          ingress:
            enabled: true
            hosts:
            - grafana.integration
            ingressClassName: nginx
            path: /
            pathType: Prefix
        influxdb:
          enabled: false
        kepler:
          enabled: true
        kubernetes-event-exporter:
          config:
            receivers:
            - name: dump
              stdout:
                deDot: true
            - loki:
                streamLabels:
                  stream: kube-events
                url: http://monitoring-stack-loki:3100/loki/api/v1/push
              name: loki
        prometheus:
          extraScrapeConfigs: "- job_name: 'prometheus-node-exporter'\n  kubernetes_sd_configs:\n
            \   - role: endpoints\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_endpoints_name]\n
            \   regex: '.*prometheus-node-exporter'\n    action: keep\n- job_name:
            'idrac-exporter'\n  static_configs:\n    - targets: ['10.14.2.6', '10.14.2.7']\n
            \ relabel_configs:\n    - source_labels: [__address__]\n      target_label:
            __param_target\n    - source_labels: [__param_target]\n      target_label:
            instance\n    - target_label: __address__\n      replacement: monitoring-stack-idrac-exporter.monitoring.svc.cluster.local:9348
            \ # The iDrac exporter's real hostname:port.      \n- job_name: 'prometheus-snmp-exporter'\n
            \ kubernetes_sd_configs:\n    - role: endpoints\n  relabel_configs:\n
            \ - source_labels: [__meta_kubernetes_endpoints_name]\n    regex: '.*prometheus-snmp-exporter'\n
            \   action: keep\n- job_name: 'dcgm-exporter'\n  kubernetes_sd_configs:\n
            \   - role: endpoints\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_endpoints_name]\n
            \   regex: '.*dcgm-exporter'\n    action: keep\n- job_name: 'kepler'\n
            \ kubernetes_sd_configs:\n    - role: endpoints\n  relabel_configs:\n
            \ - source_labels: [__meta_kubernetes_endpoints_name]\n    regex: 'kepler'\n
            \   action: keep\n- job_name: 'k8s-ephemeral-storage-metrics'\n  kubernetes_sd_configs:\n
            \   - role: pod\n  relabel_configs:\n  - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n
            \   action: keep\n    regex: 'k8s-ephemeral-storage-metrics'\n  - source_labels:
            [__meta_kubernetes_pod_ip]\n    replacement: '${1}:9100'\n    target_label:
            __address__\n- job_name: 'snmp-pdus'\n  static_configs:\n    - targets:\n
            \     - 10.14.2.3  # SNMP device PDU#1.\n      - 10.14.2.4 # SNMP device
            PDC#2.\n  metrics_path: /snmp\n  params:\n    auth: [public_v2]\n    module:
            [apcups]\n  relabel_configs:\n    - source_labels: [__address__]\n      target_label:
            __param_target\n    - source_labels: [__param_target]\n      target_label:
            instance\n    - target_label: __address__\n      replacement: monitoring-stack-prometheus-snmp-exporter.monitoring.svc.cluster.local:9116
            \ # The SNMP exporter's real hostname:port.                \n- job_name:
            'ray-head'\n  kubernetes_sd_configs:\n    - role: pod\n  relabel_configs:\n
            \ - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n
            \   action: keep\n    regex: 'ray-cluster-kuberay-head'\n- job_name: 'ray-worker'\n
            \ kubernetes_sd_configs:\n    - role: pod\n  relabel_configs:\n  - source_labels:
            [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n    action: keep\n
            \   regex: 'ray-cluster-kuberay-workergroup-worker'\n- job_name: 'jena-fuseki-exporter'\n
            \ scrape_interval: 10m\n  static_configs:\n  - targets:\n    - 'jena-fuseki-exporter.dkg-engine.svc.cluster.local'\n"
          server:
            ingress:
              enabled: true
              hosts:
              - prometheus.integration
              ingressClassName: nginx
            resources:
              limits:
                cpu: 1
                memory: 4Gi
              requests:
                cpu: 1
                memory: 4Gi
        telegraf:
          config:
            agent:
              debug: true
              flush_interval: 5s
              interval: 5s
              metric_batch_size: 50000
              metric_buffer_limit: 500000
            outputs:
            - influxdb_v2:
                bucket: prometheus
                metric_batch_size: 50000
                metric_buffer_limit: 500000
                organization: influxdata
                timeout: 30s
                token: encrypted
                urls:
                - http://monitoring-stack-influxdb2
          enabled: false
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 1
              memory: 1Gi
    repoURL: https://glaciation-heu.github.io/monitoring-stack/helm-charts/
    targetRevision: 1.0.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: nats-jetstream
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  ignoreDifferences:
  - group: apps
    jqPathExpressions:
    - .spec.volumeClaimTemplates[]?
    kind: StatefulSet
  project: default
  source:
    chart: nats
    helm:
      valuesObject:
        config:
          cluster:
            enabled: true
            replicas: 3
          jetstream:
            enabled: true
            fileStore:
              dir: /data
              enabled: true
              pvc:
                enabled: true
                size: 2Gi
                storageClassName: longhorn
            memoryStore:
              enabled: false
              maxSize: 1Gi
          mqtt:
            enabled: true
          serverNamePrefix: integration
          websocket:
            allowedOrigins: []
            enabled: true
            ingress:
              className: nginx
              hosts:
              - nats-websocket.integration
              path: /
              pathType: Prefix
            noTLS: true
            port: 8080
            sameOrigin: false
    repoURL: https://nats-io.github.io/k8s/helm/charts
    targetRevision: 1.2.6
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    - RespectIgnoreDifferences=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: nats-nack
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: nack
    helm:
      valuesObject:
        jetstream:
          nats:
            url: nats://nats-jetstream:4222
    repoURL: https://nats-io.github.io/k8s/helm/charts
    targetRevision: 0.27.0
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
    - RespectIgnoreDifferences=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true,IncludeMutationWebhook=true
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: neo4j
  namespace: argocd
spec:
  destination:
    namespace: idmg
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: neo4j
    helm:
      valuesObject:
        neo4j:
          name: idmg
          password: password
        services:
          neo4j:
            spec:
              type: ClusterIP
        volumes:
          data:
            mode: defaultStorageClass
    repoURL: https://neo4j.github.io/helm-charts/
    targetRevision: 5.21.2
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: nginx
  namespace: argocd
spec:
  destination:
    namespace: default
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: nginx-ingress
    helm:
      valuesObject:
        controller:
          config:
            entries:
              external-status-address: 10.1.14.160
          kind: deployment
          nodeSelector:
            master: "true"
          service:
            httpPort:
              enable: true
              nodePort: 31080
              port: 80
              targetPort: 80
            httpsPort:
              enable: true
              nodePort: 31443
              port: 443
              targetPort: 443
            type: NodePort
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Equal
    repoURL: ghcr.io/nginx/charts
    targetRevision: 2.0.1
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-10"
  name: nvidia-device-plugin
  namespace: argocd
spec:
  destination:
    namespace: nvidia-device-plugin
    server: https://kubernetes.default.svc
  project: default
  sources:
  - chart: nvidia-device-plugin
    helm:
      valuesObject:
        gfd:
          enabled: true
    repoURL: https://nvidia.github.io/k8s-device-plugin/stable
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: prediction-service
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: prediction-service
    helm:
      valuesObject:
        ingressHostName: prediction.integration
    repoURL: https://glaciation-heu.github.io/glaciation-prediction-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: replica-service
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: rhio
    helm:
      valuesObject:
        configuration:
          nats:
            endpoint: nats-jetstream.dkg-engine.svc.cluster.local:4222
          nodes:
          - endpoints:
            - 10.14.2.5:31100
            public_key: b2030d8df6c0a8bc53513e1c1746446ff00424e39f0ba25441f76b3d68752b8c
          publish:
            nats_subjects:
            - stream: dkg-stream
              subject: dkg-engine.energy.integration
          s3:
            credentials:
              access_key: minio
              secret_key: minio123
            endpoint: http://dkg-hl.dkg-engine.svc.cluster.local:9000
            region: eu-central-1
          subscribe:
            nats_subjects:
            - public_key: b2030d8df6c0a8bc53513e1c1746446ff00424e39f0ba25441f76b3d68752b8c
              stream: dkg-stream
              subject: dkg-engine.energy.validation
        debug: =DEBUG
        nodeSelector:
          master: "true"
        secretKey: "3366656464356265336466306662343365373332386165303834336338636231"
        services:
          health:
            port: 8080
          network:
            nodePort: 31100
            port: 9102
          type: NodePort
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
    repoURL: https://HIRO-MicroDataCenters-BV.github.io/rhio/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "-8"
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: semantification-service
  namespace: argocd
spec:
  destination:
    namespace: semantification
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: semantification-service
    helm:
      valuesObject:
        ingressHostName: semantification.integration
    repoURL: https://glaciation-heu.github.io/glaciation-semantification-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: trade-off-service
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: trade-off-service
    helm:
      valuesObject:
        config:
          metadata-service:
            url: http://metadata-service/api/v0/graph?query={query}
          prometheus:
            url: http://monitoring-stack-prometheus-server.monitoring/api/v1/query?query={query}
        ingressHostName: tradeoff.integration
    repoURL: https://glaciation-heu.github.io/trade-off-service/helm-charts/
    targetRevision: 1.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: uc2-workload-service
  namespace: argocd
spec:
  destination:
    namespace: uc2
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: uc2-workload
    helm:
      valuesObject:
        ingressHostName: uc2-workload.integration
    repoURL: https://glaciation-heu.github.io/glaciation-uc2-workload-service/helm-charts/
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  finalizers:
  - resources-finalizer.argocd.argoproj.io
  name: ui-gateway
  namespace: argocd
spec:
  destination:
    namespace: dkg-engine
    server: https://kubernetes.default.svc
  project: default
  source:
    chart: ui-gateway-server
    repoURL: https://glaciation-heu.github.io/ui_gateway/helm-charts
    targetRevision: 0.*.*
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
    - CreateNamespace=true
    - ServerSideApply=true
---
apiVersion: batch/v1
kind: Job
metadata:
  name: anomaly-detection-job
  namespace: uc2
spec:
  template:
    spec:
      containers:
      - args:
        - --url
        - http://metadata-service.dkg-engine.svc.cluster.local/api/v0/graph
        command:
        - python
        - /app/workload_anomaly_detection.py
        image: ghcr.io/glaciation-heu/dell-uc/workload-anomaly-detection:latest
        imagePullPolicy: IfNotPresent
        name: anomaly-detection
        resources:
          limits:
            nvidia.com/gpu: "0"
          requests:
            cpu: "2"
            ephemeral-storage: 500M
            memory: 2Gi
      nodeSelector:
        kubernetes.io/hostname: glaciation-testm1w5-worker01
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: object-distribution-job
  namespace: uc2
spec:
  template:
    spec:
      containers:
      - args:
        - --url
        - http://metadata-service.dkg-engine.svc.cluster.local/api/v0/graph
        command:
        - python
        - /app/workload_object_distribution.py
        image: ghcr.io/glaciation-heu/dell-uc/workload_object_distribution:latest
        imagePullPolicy: Always
        name: object-distribution
        resources:
          limits:
            nvidia.com/gpu: "0"
          requests:
            cpu: "2"
            ephemeral-storage: 500M
            memory: 2Gi
      nodeSelector:
        kubernetes.io/hostname: glaciation-testm1w5-worker01
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: operational-efficiency-job
  namespace: uc2
spec:
  template:
    spec:
      containers:
      - args:
        - --url
        - http://metadata-service.dkg-engine.svc.cluster.local/api/v0/graph
        command:
        - python
        - workload_operational_efficiency.py
        image: ghcr.io/glaciation-heu/dell-uc/workload_operational_efficiency:latest
        imagePullPolicy: IfNotPresent
        name: operational-efficiency
        resources:
          limits:
            nvidia.com/gpu: "0"
          requests:
            cpu: "2"
            ephemeral-storage: 500M
            memory: 2Gi
      nodeSelector:
        kubernetes.io/hostname: glaciation-testm1w5-worker01
      restartPolicy: Never
---
apiVersion: jetstream.nats.io/v1beta2
kind: Stream
metadata:
  name: nats-stream
  namespace: dkg-engine
spec:
  name: dkg-stream
  replicas: 1
  storage: file
  subjects:
  - dkg-engine.energy.validation
  - dkg-engine.energy.integration
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-ingress
  namespace: argocd
spec:
  ingressClassName: nginx
  rules:
  - host: argocd.integration
    http:
      paths:
      - backend:
          service:
            name: argocd-server
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-ingress
  namespace: jenkins
spec:
  ingressClassName: nginx
  rules:
  - host: jenkins.integration
    http:
      paths:
      - backend:
          service:
            name: jenkins
            port:
              number: 8080
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafdrop-ingress
  namespace: kafdrop
spec:
  ingressClassName: nginx
  rules:
  - host: kafdrop.integration
    http:
      paths:
      - backend:
          service:
            name: kafdrop
            port:
              number: 80
        path: /kafdrop/
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: longhorn-ingress
  namespace: longhorn-system
spec:
  ingressClassName: nginx
  rules:
  - host: longhorn.integration
    http:
      paths:
      - backend:
          service:
            name: longhorn-frontend
            port:
              number: 80
        path: /
        pathType: Prefix
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.org/client-max-body-size: "0"
  name: mef-sog-uc1-ingress
  namespace: mef-sog-uc1-wl
spec:
  ingressClassName: nginx
  rules:
  - host: mef-sog-uc1.integration
    http:
      paths:
      - backend:
          service:
            name: scheduled-client-entrypoint
            port:
              number: 80
        path: /
        pathType: Prefix
